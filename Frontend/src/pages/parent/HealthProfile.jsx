import React, { useEffect, useState } from "react";
import Sidebar from "../../components/sb-Parent/Sidebar";
import styles from "../../assets/css/HealthProfile.module.css";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const HealthProfile = () => {
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({});

  useEffect(() => {
    const fetchHealthProfile = async () => {
      try {
        const response = await axios.get(
          "https://swp-school-medical-management.onrender.com/api/HealthProfile/1"
        );
        const data = {
          ...response.data.data,
          vision: "10/10",
          hearing: "B√¨nh th∆∞·ªùng",
          exercise: "3 bu·ªïi/tu·∫ßn",
          doctorNote: "ƒÇn u·ªëng ƒë·∫ßy ƒë·ªß, ng·ªß ƒë·ªß gi·∫•c",
        };
        setProfile(data);
        setFormData(data);
      } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchHealthProfile();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSave = async () => {
    try {
      await axios.put(
        `https://swp-school-medical-management.onrender.com/api/HealthProfile/${profile.profileId}`,
        {
          studentId: profile.studentId,
          height: formData.height,
          weight: formData.weight,
          chronicDiseases: formData.chronicDiseases,
          allergies: formData.allergies,
          generalNote: formData.generalNote,
          isActive: formData.isActive,
        }
      );
      toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!", {
        position: "top-center",
        autoClose: 1800,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "colored",
      });
      setProfile({ ...profile, ...formData });
      setIsEditing(false);
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t:", error);
      toast.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!", {
        position: "top-center",
        autoClose: 1800,
        theme: "colored",
      });
    }
  };

  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!profile) return <p>Kh√¥ng c√≥ h·ªì s∆° s·ª©c kh·ªèe.</p>;

  return (
    <div className={styles.container}>
      <ToastContainer />
      <Sidebar />
      <div className={styles.content}>
        <h2 className={styles.title}>
          <span className={styles.accent}>|</span> H·ªì s∆°{" "}
          <span className={styles.greenText}>s·ª©c kh·ªèe h·ªçc sinh</span>
        </h2>

        <div className={styles.profileWrapper}>
          <div className={styles.leftPanel}>
            <img src="https://i.pravatar.cc/120" alt="avatar" className={styles.avatar} />
            <h3 className={styles.name}>L√™ Tr·∫ßn ƒê·ª©c Th·∫Øng</h3>

            <div className={styles.infoBlock}>
              <div className={styles.infoItem}>
                <span>Chi·ªÅu cao:</span>
                <span>
                  {isEditing ? (
                    <input name="height" value={formData.height} onChange={handleChange} />
                  ) : (
                    `${profile.height} cm`
                  )}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span>C√¢n n·∫∑ng:</span>
                <span>
                  {isEditing ? (
                    <input name="weight" value={formData.weight} onChange={handleChange} />
                  ) : (
                    `${profile.weight} kg`
                  )}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span>B·ªánh m√£n t√≠nh:</span>
                <span>
                  {isEditing ? (
                    <input name="chronicDiseases" value={formData.chronicDiseases} onChange={handleChange} />
                  ) : (
                    profile.chronicDiseases
                  )}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span>D·ªã ·ª©ng:</span>
                <span>
                  {isEditing ? (
                    <input name="allergies" value={formData.allergies} onChange={handleChange} />
                  ) : (
                    profile.allergies
                  )}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span>Ghi ch√∫:</span>
                <span>
                  {isEditing ? (
                    <input name="generalNote" value={formData.generalNote} onChange={handleChange} />
                  ) : (
                    profile.generalNote
                  )}
                </span>
              </div>
              <div className={styles.infoItem}>
                <span>Tr·∫°ng th√°i:</span>
                <span>
                  {isEditing ? (
                    <select name="isActive" value={formData.isActive} onChange={handleChange}>
                      <option value={true}>ƒêang ho·∫°t ƒë·ªông</option>
                      <option value={false}>Ng·ª´ng ho·∫°t ƒë·ªông</option>
                    </select>
                  ) : profile.isActive ? (
                    "ƒêang ho·∫°t ƒë·ªông"
                  ) : (
                    "Ng·ª´ng ho·∫°t ƒë·ªông"
                  )}
                </span>
              </div>
            </div>

            {!isEditing ? (
              <button className={styles.updateButton} onClick={() => setIsEditing(true)}>
                C·∫≠p nh·∫≠t
              </button>
            ) : (
              <>
                <button className={styles.updateButton} onClick={handleSave}>L∆∞u</button>
                <button className={styles.updateButton} onClick={() => setIsEditing(false)}>Hu·ª∑</button>
              </>
            )}
          </div>

          <div className={styles.rightPanel}>
            <div className={styles.basicInfoRow}>
              <div className={styles.basicInfoBox}>
                <div className={styles.basicIcon}>üë©‚Äç‚öïÔ∏è</div>
                <div className={styles.basicLabel}>Gi·ªõi t√≠nh</div>
                <div className={styles.basicValue}>N·ªØ</div>
              </div>
              <div className={styles.basicInfoBox}>
                <div className={styles.basicIcon}>üéÇ</div>
                <div className={styles.basicLabel}>Tu·ªïi</div>
                <div className={styles.basicValue}>9</div>
              </div>
              <div className={styles.basicInfoBox}>
                <div className={styles.basicIcon}>üè´</div>
                <div className={styles.basicLabel}>L·ªõp</div>
                <div className={styles.basicValue}>M·∫´u gi√°o</div>
              </div>
            </div>

            <div className={styles.infoBox}>
              <h4>ü©∫ Test Reports</h4>
              <ul className={styles.reportList}>
                <li>CT Scan - Full Body <span>(12th Feb 2020)</span></li>
                <li>Creatine Kinase T <span>(12th Feb 2020)</span></li>
                <li>Eye Fluorescein Test <span>(12th Feb 2020)</span></li>
              </ul>
            </div>

            <div className={styles.infoBox}>
              <h4>üíä Prescriptions</h4>
              <p className={styles.addPrescription}>+ Add a prescription</p>
              <ul className={styles.reportList}>
                <li><b>Heart Diseases</b> ‚Äì 25th Oct 2019 ‚Äì 3 months</li>
                <li><b>Skin Care</b> ‚Äì 8th Aug 2019 ‚Äì 2 months</li>
              </ul>
            </div>
          </div>

        </div>
      </div>
    </div>
  );
};

export default HealthProfile;
